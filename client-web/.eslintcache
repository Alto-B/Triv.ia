[{"C:\\Users\\shris\\Develop\\React Native\\trivia\\client-web\\src\\index.js":"1","C:\\Users\\shris\\Develop\\React Native\\trivia\\client-web\\src\\components\\game\\Game.js":"2","C:\\Users\\shris\\Develop\\React Native\\trivia\\client-web\\src\\components\\auth\\SignUp.js":"3","C:\\Users\\shris\\Develop\\React Native\\trivia\\client-web\\src\\components\\dashboard\\Event-Cards\\EventCard.js":"4","C:\\Users\\shris\\Develop\\React Native\\trivia\\client-web\\src\\components\\dashboard\\charts\\ChartTitle.js":"5"},{"size":615,"mtime":1612060257727,"results":"6","hashOfConfig":"7"},{"size":4687,"mtime":1612099707931,"results":"8","hashOfConfig":"7"},{"size":4001,"mtime":1612060257725,"results":"9","hashOfConfig":"7"},{"size":4970,"mtime":1612098943209,"results":"10","hashOfConfig":"7"},{"size":444,"mtime":1612051142476,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"3ivhw0",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\shris\\Develop\\React Native\\trivia\\client-web\\src\\index.js",[],["24","25"],"C:\\Users\\shris\\Develop\\React Native\\trivia\\client-web\\src\\components\\game\\Game.js",["26","27","28","29"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { AppBar, Box, Button, CircularProgress, Grid, Toolbar, Typography } from '@material-ui/core';\r\nimport { AuthContext } from '../../contexts/AuthContext';\r\nimport Leaderboard from '../dashboard/leaderboard/Leaderboard';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst SOCKET_URL = \"http://6a81f3ad6aa1.ngrok.io\"\r\nconst io = require(\"socket.io-client\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    spinner: {\r\n        marginTop: \"10%\"\r\n    },\r\n    button: {\r\n        marginTop: \"5%\"\r\n    }\r\n  }));\r\n\r\nconst Game = () => {\r\n    const history = useHistory()\r\n    const classes = useStyles();\r\n\r\n    const { eventList, curEvent } = useContext(AuthContext)\r\n    const [socket, setSocket] = useState(null)\r\n    const [started, setStarted] = useState(false)\r\n    const [ended, setEnded] = useState(false)\r\n    const [gameData, setGameData] = useState(null)\r\n\r\n    const [timer, setTimer] = useState(0)\r\n    const [lb, setLb] = useState(null)\r\n\r\n    useEffect(() => {\r\n        if(started) {\r\n            const timerID = setInterval(() => {\r\n                const newTimer = (timer + 1) % 10\r\n                if (newTimer === 9) socket.emit(\"next-question\")\r\n                setTimer(newTimer)\r\n            }, 1000)\r\n\r\n            return () => clearInterval(timerID)\r\n        }\r\n    }, [timer, started])\r\n\r\n    useEffect(() => {\r\n        setStarted(false)\r\n        setGameData(null)\r\n\r\n        let connection = io(SOCKET_URL)\r\n        setSocket(connection)\r\n\r\n        connection.emit(\"new-game\", eventList[curEvent]._id)\r\n    }, [curEvent])\r\n\r\n    useEffect(() => {\r\n        if(socket) {\r\n            socket.on(\"new-question\", newData => {\r\n                setGameData(newData)\r\n            })\r\n\r\n            socket.on(\"game-end\", (leaderboard) => {\r\n                console.log(leaderboard)\r\n\r\n                console.log(\"game over\")\r\n                setEnded(true)\r\n                setStarted(false)\r\n                setLb(leaderboard)\r\n            })\r\n        }\r\n    }, [socket])\r\n\r\n    const startGame = () => {\r\n        setStarted(true)\r\n        socket.emit(\"next-question\")\r\n    }\r\n\r\n    const renderGame = () => {\r\n        if(!gameData) return\r\n\r\n        const {question, step, totalSteps} = gameData\r\n\r\n        return renderQuestion(question)\r\n    }\r\n\r\n    const colors = [\"#9B51E0\", \"#2F80ED\", \"#27AE60\", \"#EB5757\"]\r\n\r\n    const renderQuestion = (question) => (\r\n        <>\r\n            <Typography variant=\"h3\"component=\"h3\" style={{marginTop: 30}}>\r\n                {question.prompt}\r\n            </Typography>\r\n            <Grid container spacing={5} style={{marginTop: '10%'}}>\r\n            {\r\n                question.answers.map((answer, index) => (\r\n                    <Grid item xs={6} key={index} style={{marginBottom: 10}}>\r\n                        <Box bgcolor={\"#c9c8c5\"}>\r\n                            <Typography variant=\"h2\" component=\"h5\" style={{padding: 100, color:colors[index]}} borderRadius={16}>\r\n                                {answer.text}\r\n                            </Typography>\r\n\r\n                        </Box>\r\n                    </Grid>\r\n                ))\r\n            }\r\n            </Grid>\r\n        </>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            {/* <p>{eventList[curEvent].name}</p> */}\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        {eventList[curEvent].name}\r\n                    </Typography>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            {started || ended ? null: \r\n                <div>\r\n                    <Typography style={{marginTop: 10}} variant=\"h1\" component=\"h3\">\r\n                        Waiting for Players\r\n                    </Typography>\r\n                    <CircularProgress color='secondary' size={90} className={classes.spinner}></CircularProgress>\r\n                </div>}\r\n            \r\n            \r\n            {started || ended ? null : <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={startGame} className={classes.button}>Start</Button>}\r\n            \r\n            {started ? renderGame() : null}\r\n            {ended ? <Paper><Leaderboard info={lb}/></Paper> : null}\r\n            {ended ? <Button onClick={() => history.push(\"/app/dashboard\")}>Go Back</Button> : null}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Game;","C:\\Users\\shris\\Develop\\React Native\\trivia\\client-web\\src\\components\\auth\\SignUp.js",["30","31"],"C:\\Users\\shris\\Develop\\React Native\\trivia\\client-web\\src\\components\\dashboard\\Event-Cards\\EventCard.js",["32"],"C:\\Users\\shris\\Develop\\React Native\\trivia\\client-web\\src\\components\\dashboard\\charts\\ChartTitle.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":53,"column":8,"nodeType":"39","endLine":53,"endColumn":24,"suggestions":"40"},{"ruleId":"37","severity":1,"message":"41","line":63,"column":8,"nodeType":"39","endLine":63,"endColumn":18,"suggestions":"42"},{"ruleId":"43","severity":1,"message":"44","line":90,"column":26,"nodeType":"45","messageId":"46","endLine":90,"endColumn":30},{"ruleId":"43","severity":1,"message":"47","line":90,"column":32,"nodeType":"45","messageId":"46","endLine":90,"endColumn":42},{"ruleId":"43","severity":1,"message":"48","line":6,"column":8,"nodeType":"45","messageId":"46","endLine":6,"endColumn":24},{"ruleId":"43","severity":1,"message":"49","line":7,"column":8,"nodeType":"45","messageId":"46","endLine":7,"endColumn":16},{"ruleId":"43","severity":1,"message":"50","line":13,"column":8,"nodeType":"45","messageId":"46","endLine":13,"endColumn":21},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.","ArrayExpression",["53"],"React Hook useEffect has a missing dependency: 'eventList'. Either include it or remove the dependency array.",["54"],"no-unused-vars","'step' is assigned a value but never used.","Identifier","unusedVar","'totalSteps' is assigned a value but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'DialogActions' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},{"desc":"57","fix":"58"},"Update the dependencies array to be: [timer, started, socket]",{"range":"59","text":"60"},"Update the dependencies array to be: [curEvent, eventList]",{"range":"61","text":"62"},[1611,1627],"[timer, started, socket]",[1854,1864],"[curEvent, eventList]"]